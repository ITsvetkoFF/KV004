{
  "name": "express-myconnection",
  "version": "1.0.4",
  "description": "Connect/Express middleware that auto provides mysql connections.",
  "main": "index.js",
  "directories": {
    "example": "examples"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/pwalczyszyn/express-myconnection.git"
  },
  "homepage": "http://github.com/pwalczyszyn/express-myconnection",
  "keywords": [
    "express",
    "mysql",
    "connect",
    "pool",
    "middleware"
  ],
  "author": {
    "name": "Piotr Walczyszyn"
  },
  "license": "MIT",
  "readme": "express-myconnection\n============\n\nConnect/Express middleware provides a consistent API for MySQL connections during request/response life cycle. It supports three different strategies of managing db connections: ` single ` for a singleton connection on an app instance level, `pool` based connections, and a new connection per each `request`. Itâ€™s also capable of auto closing/releasing connections if configured either with `pool` or `request`. It uses [node-mysql](https://github.com/felixge/node-mysql) as a MySQL driver.\n\n### Strategies\n*   `single` - creates single database connection for an application instance. Connection is never closed. In case of disconnection it will try to reconnect again as described in [node-mysql docs](https://github.com/felixge/node-mysql).\n*   `pool` - creates pool of connections on an app instance level, and serves a single connection from pool per request. The connections is auto released to the pool at the response end.\n*   `request` - creates new connection per each request, and automatically closes it at the response end.\n\n### Usage\n\nConfiguration is straightforward and you use it as any other middleware. First param it accepts is a  [node-mysql](https://github.com/felixge/node-mysql) module, second is a db options hash passed to [node-mysql](https://github.com/felixge/node-mysql) module when connection or pool are created. The third is string defining strategy type.\n\n    // app.js\n    ...\n    var mysql = require('mysql'), // node-mysql module\n        myConnection = require('express-myconnection'), // express-myconnection module\n        dbOptions = {\n          host: 'localhost',\n          user: 'dbuser',\n          password: 'password',\n          port: 3306,\n          database: 'mydb'\n        };\n      \n    app.use(myConnection(mysql, dbOptions, 'single');\n    ...\n    \n**express-myconnection** extends `request` object with `getConection(callback)` function, this way connection instance can be accessed anywhere in routers during request/response life cycle:\n\n    // myroute.js\n    ...\n    module.exports = function(req, res, next) {\n        ...\n        req.getConnection(function(err, connection) {\n          if (err) return next(err);\n          \n          connection.query('SELECT 1 AS RESULT', [], function(err, results) {\n            if (err) return next(err);\n            \n            results[0].RESULT;\n            // -> 1\n            \n            res.send(200);\n          });\n          \n        });\n        ...\n    }\n    ...\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pwalczyszyn/express-myconnection/issues"
  },
  "_id": "express-myconnection@1.0.4",
  "_from": "express-myconnection@*"
}
